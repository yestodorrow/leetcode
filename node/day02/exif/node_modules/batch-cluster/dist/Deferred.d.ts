/**
 * Enables a Promise to be resolved or rejected at a future time, outside of
 * the context of the Promise construction. Also exposes the `pending`,
 * `fulfilled`, or `rejected` state of the promise.
 */
export declare class Deferred<T> {
    readonly promise: Promise<T>;
    private _resolve;
    private _reject;
    private state;
    constructor();
    /**
     * @return `true` iff `resolve` has been invoked.
     */
    readonly pending: boolean;
    /**
     * @return `true` iff `resolve` has been invoked.
     */
    readonly fulfilled: boolean;
    /**
     * @return `true` iff `resolve` has been invoked.
     */
    readonly rejected: boolean;
    resolve(value?: T): boolean;
    reject(reason?: any): boolean;
}
