"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Object_1 = require("./Object");
/**
 * Remove all elements from the given array that return false from the given
 * predicate `filter`.
 */
function filterInPlace(arr, filter) {
    var j = 0;
    arr.forEach(function (ea, i) {
        if (filter(ea)) {
            if (i !== j)
                arr[j] = ea;
            j++;
        }
    });
    arr.length = j;
    return arr;
}
exports.filterInPlace = filterInPlace;
function flatten(arr, result) {
    if (result === void 0) { result = []; }
    arr.forEach(function (ea) { return (Array.isArray(ea) ? result.push.apply(result, __spread(ea)) : result.push(ea)); });
    return result;
}
exports.flatten = flatten;
function sortNumeric(arr) {
    return arr.sort(function (a, b) { return a - b; });
}
exports.sortNumeric = sortNumeric;
/**
 * Treat an array as a round-robin list, starting from `startIndex`.
 */
function rrFind(arr, startIndex, predicate) {
    return Object_1.map(rrFindResult(arr, startIndex, predicate), function (ea) { return ea.result; });
}
exports.rrFind = rrFind;
function rrFindResult(arr, startIndex, predicate) {
    for (var iter = 0; iter < arr.length; iter++) {
        var arrIdx = (iter + startIndex) % arr.length;
        var t = arr[arrIdx];
        if (predicate(t, arrIdx, iter))
            return { result: t, index: arrIdx };
    }
    return;
}
exports.rrFindResult = rrFindResult;
//# sourceMappingURL=Array.js.map