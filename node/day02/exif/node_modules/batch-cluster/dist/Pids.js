"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _cp = require("child_process");
var _os = require("os");
var _p = require("process");
var isWin = _os.platform().startsWith("win");
function safePid(pid) {
    if (typeof pid !== "number") {
        throw new Error("invalid pid: " + JSON.stringify(pid));
    }
    else {
        return Math.floor(pid).toString();
    }
}
/*

Windows 10:

>tasklist /NH /FO "CSV" /FI "PID eq 15524"
INFO: No tasks are running which match the specified criteria.

>tasklist /NH /FO "CSV" /FI "PID eq 11968"
"bash.exe","11968","Console","1","5,340 K"

Linux:

$ ps -p 20242
  PID TTY          TIME CMD
20242 pts/3    00:00:00 bash

Mac:

$ ps -p 32183
  PID TTY           TIME CMD
32183 ttys001    0:00.10 /bin/bash -l

*/
/**
 * @export
 * @param {number} pid process id. Required.
 * @returns {Promise<boolean>} true if the given process id is in the local
 * process table. The PID may be paused or a zombie, though.
 */
function pidExists(pid) {
    var needle = safePid(pid);
    var cmd = isWin ? "tasklist" : "ps";
    var args = isWin
        ? // NoHeader, FOrmat CSV, FIlter on pid:
            ["/NH", "/FO", "CSV", "/FI", "PID eq " + needle]
        : // linux has "quick" mode (-q) but mac doesn't. We add the ",1" to avoid ps
            // returning exit code 1, which generates an extraneous Error.
            ["-p", needle + ",1"];
    return new Promise(function (resolve) {
        _cp.execFile(cmd, args, function (error, stdout) {
            var result = error == null &&
                new RegExp(isWin ? '"' + needle + '"' : "^\\s*" + needle + "\\b", 
                // The posix regex pattern needs multiline support:
                "m").exec(String(stdout).trim()) != null;
            resolve(result);
        });
    });
}
exports.pidExists = pidExists;
var winRe = /^".+?","(\d+)"/;
var posixRe = /^\s*(\d+)/;
/**
 * @export
 * @returns {Promise<number[]>} all the Process IDs in the process table.
 */
function pids() {
    return new Promise(function (resolve, reject) {
        _cp.execFile(isWin ? "tasklist" : "ps", isWin ? ["/NH", "/FO", "CSV"] : ["-e"], function (error, stdout, stderr) {
            if (error != null) {
                reject(error);
            }
            else if (("" + stderr).trim().length > 0) {
                reject(new Error(stderr));
            }
            else
                resolve(("" + stdout)
                    .trim()
                    .split(/[\n\r]+/)
                    .map(function (ea) { return ea.match(isWin ? winRe : posixRe); })
                    .filter(function (m) { return m != null; })
                    .map(function (m) { return parseInt(m[1]); }));
        });
    });
}
exports.pids = pids;
/**
 * Send a signal to the given process id.
 *
 * @export
 * @param {number} pid the process id. Required.
 * @param {boolean} [force=false] if true, and the current user has
 * permissions to send the signal, the pid will be forced to shut down.
 */
function kill(pid, force) {
    if (force === void 0) { force = false; }
    if (pid === _p.pid || pid === _p.ppid) {
        throw new Error("cannot self-terminate");
    }
    if (isWin) {
        var args = ["/PID", safePid(pid), "/T"];
        if (force) {
            args.push("/F");
        }
        _cp.execFile("taskkill", args);
    }
    else {
        try {
            _p.kill(pid, force ? "SIGKILL" : "SIGTERM");
        }
        catch (err) {
            if (!String(err).includes("ESRCH"))
                throw err;
        }
    }
}
exports.kill = kill;
//# sourceMappingURL=Pids.js.map