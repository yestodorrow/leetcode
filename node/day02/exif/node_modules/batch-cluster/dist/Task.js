"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Deferred_1 = require("./Deferred");
var Logger_1 = require("./Logger");
/**
 * Tasks embody individual jobs given to the underlying child processes. Each
 * instance has a promise that will be resolved or rejected based on the
 * result of the task.
 */
var Task = /** @class */ (function () {
    /**
     * @param {string} command is the value written to stdin to perform the given
     * task.
     * @param {Parser<T>} parser is used to parse resulting data from the
     * underlying process to a typed object.
     */
    function Task(command, parser) {
        this.command = command;
        this.parser = parser;
        this.d = new Deferred_1.Deferred();
        this._stdout = "";
        this._stderr = "";
    }
    Object.defineProperty(Task.prototype, "promise", {
        /**
         * @return the resolution or rejection of this task.
         */
        get: function () {
            return this.d.promise;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Task.prototype, "pending", {
        get: function () {
            return this.d.pending;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Task.prototype, "state", {
        get: function () {
            return this.d.pending
                ? "pending"
                : this.d.fulfilled
                    ? "resolved"
                    : "rejected";
        },
        enumerable: true,
        configurable: true
    });
    Task.prototype.toString = function () {
        return this.constructor.name + "(" + this.command + ")";
    };
    Task.prototype.onStdout = function (buf) {
        this._stdout += buf.toString();
    };
    Task.prototype.onStderr = function (buf) {
        this._stderr += buf.toString();
    };
    Object.defineProperty(Task.prototype, "stdout", {
        get: function () {
            return this._stdout;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Task.prototype, "stderr", {
        get: function () {
            return this._stderr;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This is for use by `BatchProcess` only, and will only be called when the
     * process is complete for this task's command
     */
    Task.prototype.resolve = function (stdout, stderr, passed) {
        return __awaiter(this, void 0, void 0, function () {
            var parseResult, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.parser(stdout, stderr, passed)
                            // logger().trace("Task.onData(): resolved", {
                            //   command: this.command,
                            //   parseResult
                            // })
                        ];
                    case 1:
                        parseResult = _a.sent();
                        // logger().trace("Task.onData(): resolved", {
                        //   command: this.command,
                        //   parseResult
                        // })
                        this.d.resolve(parseResult);
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        this.reject(error_1, "Task.onData(): rejected");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * This is for use by `BatchProcess` only, and will only be called when the
     * process has errored after N retries
     */
    Task.prototype.reject = function (error, source) {
        if (source === void 0) { source = "Task.reject()"; }
        Logger_1.logger().warn(source, {
            cmd: this.command,
            error: error
        });
        this.d.reject(error);
    };
    return Task;
}());
exports.Task = Task;
//# sourceMappingURL=Task.js.map