"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
 */
var State;
(function (State) {
    State[State["pending"] = 0] = "pending";
    State[State["fulfilled"] = 1] = "fulfilled";
    State[State["rejected"] = 2] = "rejected";
})(State || (State = {}));
/**
 * Enables a Promise to be resolved or rejected at a future time, outside of
 * the context of the Promise construction. Also exposes the `pending`,
 * `fulfilled`, or `rejected` state of the promise.
 */
var Deferred = /** @class */ (function () {
    function Deferred() {
        var _this = this;
        this.state = State.pending;
        this.promise = new Promise(function (resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });
    }
    Object.defineProperty(Deferred.prototype, "pending", {
        /**
         * @return `true` iff `resolve` has been invoked.
         */
        get: function () {
            return this.state === State.pending;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Deferred.prototype, "fulfilled", {
        /**
         * @return `true` iff `resolve` has been invoked.
         */
        get: function () {
            return this.state === State.fulfilled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Deferred.prototype, "rejected", {
        /**
         * @return `true` iff `resolve` has been invoked.
         */
        get: function () {
            return this.state === State.rejected;
        },
        enumerable: true,
        configurable: true
    });
    Deferred.prototype.resolve = function (value) {
        if (!this.pending) {
            return false;
        }
        else {
            this.state = State.fulfilled;
            this._resolve(value);
            return true;
        }
    };
    Deferred.prototype.reject = function (reason) {
        if (!this.pending) {
            return false;
        }
        else {
            this.state = State.rejected;
            this._reject(reason);
            return true;
        }
    };
    return Deferred;
}());
exports.Deferred = Deferred;
//# sourceMappingURL=Deferred.js.map