/// <reference types="node" />
import { ChildProcess } from "child_process";
import { BatchClusterEmitter } from "./BatchClusterEmitter";
import { AllOpts, BatchClusterOptions } from "./BatchClusterOptions";
import { BatchProcessOptions } from "./BatchProcessOptions";
import { Task } from "./Task";
export { BatchClusterOptions } from "./BatchClusterOptions";
export { BatchProcessOptions } from "./BatchProcessOptions";
export { Deferred } from "./Deferred";
export * from "./Logger";
export { Parser, SimpleParser } from "./Parser";
export { kill, pidExists, pids } from "./Pids";
export { Task } from "./Task";
/**
 * These are required parameters for a given BatchCluster.
 */
export interface ChildProcessFactory {
    /**
     * Expected to be a simple call to execFile. Platform-specific code is the
     * responsibility of this thunk. Error handlers will be registered as
     * appropriate.
     */
    readonly processFactory: () => ChildProcess | Promise<ChildProcess>;
}
/**
 * BatchCluster instances manage 0 or more homogenious child processes, and
 * provide the main interface for enqueing `Task`s via `enqueueTask`.
 *
 * Given the large number of configuration options, the constructor
 * receives a single options hash. The most important of these are the
 * `ChildProcessFactory`, which specifies the factory that creates
 * ChildProcess instances, and `BatchProcessOptions`, which specifies how
 * child tasks can be verified and shut down.
 */
export declare class BatchCluster extends BatchClusterEmitter {
    private readonly _tasksPerProc;
    readonly options: AllOpts;
    private readonly observer;
    private readonly _procs;
    private _lastUsedProcsIdx;
    private _lastSpawnedProcTime;
    private readonly tasks;
    private onIdleInterval?;
    private readonly startErrorRate;
    private _spawnedProcs;
    private endprocs?;
    private _internalErrorCount;
    constructor(opts: Partial<BatchClusterOptions> & BatchProcessOptions & ChildProcessFactory);
    private readonly beforeExitListener;
    private readonly exitListener;
    readonly ended: boolean;
    /**
     * Shut down this instance, and all child processes.
     * @param gracefully should an attempt be made to finish in-flight tasks, or
     * should we force-kill child PIDs.
     */
    end(gracefully?: boolean): Promise<void>;
    /**
     * Submits `task` for processing by a `BatchProcess` instance
     *
     * @return a Promise that is resolved or rejected once the task has been
     * attemped on an idle BatchProcess
     */
    enqueueTask<T>(task: Task<T>): Promise<T>;
    /**
     * @return true if all previously-enqueued tasks have settled
     */
    readonly isIdle: boolean;
    /**
     * @return the number of pending tasks
     */
    readonly pendingTasks: number;
    /**
     * @returns {number} the mean number of tasks completed by child processes
     */
    readonly meanTasksPerProc: number;
    /**
     * @return the total number of child processes created by this instance
     */
    readonly spawnedProcs: number;
    /**
     * @return the current number of child processes currently servicing tasks
     */
    readonly busyProcs: number;
    /**
     * For integration tests:
     */
    readonly internalErrorCount: number;
    private onInternalError;
    private onStartError;
    /**
     * Exposed only for unit tests
     *
     * @return the spawned PIDs that are still in the process table.
     */
    pids(): Promise<number[]>;
    private onIdle;
    private vacuumProcs;
    private execNextTask;
    private readonly maybeLaunchNewChild;
}
