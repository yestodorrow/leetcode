"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("util");
var Object_1 = require("./Object");
var String_1 = require("./String");
exports.LogLevels = [
    "trace",
    "debug",
    "info",
    "warn",
    "error"
];
var _debuglog = util_1.debuglog("batch-cluster");
var noop = function () { return undefined; };
/**
 * Default `Logger` implementation.  `debug` and `info` go to
 * util.debuglog("batch-cluster")`. `warn` and `error` go to `console.warn` and
 * `console.error`.
 */
exports.ConsoleLogger = Object.freeze({
    /**
     * No-ops by default, as this is very low-level information.
     */
    trace: noop,
    /**
     * Delegates to `util.debuglog("batch-cluster")`:
     * <https://nodejs.org/api/util.html#util_util_debuglog_section>
     */
    debug: _debuglog,
    /**
     * Delegates to `util.debuglog("batch-cluster")`:
     * <https://nodejs.org/api/util.html#util_util_debuglog_section>
     */
    info: _debuglog,
    /**
     * Delegates to `console.warn`
     */
    warn: console.warn,
    /**
     * Delegates to `console.error`
     */
    error: console.error
});
/**
 * `Logger` that disables all logging.
 */
exports.NoLogger = Object.freeze({
    trace: noop,
    debug: noop,
    info: noop,
    warn: noop,
    error: noop
});
var _logger = exports.NoLogger;
function setLogger(l) {
    if (exports.LogLevels.some(function (ea) { return typeof l[ea] !== "function"; })) {
        throw new Error("invalid logger, must implement " + exports.LogLevels);
    }
    _logger = l;
}
exports.setLogger = setLogger;
function logger() {
    return _logger;
}
exports.logger = logger;
var Logger;
(function (Logger) {
    function withLevels(delegate) {
        var timestamped = {};
        exports.LogLevels.forEach(function (ea) {
            var prefix = (ea + " ").substring(0, 5) + " | ";
            timestamped[ea] = function (message) {
                var optionalParams = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    optionalParams[_i - 1] = arguments[_i];
                }
                if (String_1.notBlank(message)) {
                    delegate[ea].apply(delegate, __spread([prefix + message], optionalParams));
                }
            };
        });
        return timestamped;
    }
    Logger.withLevels = withLevels;
    function withTimestamps(delegate) {
        var timestamped = {};
        exports.LogLevels.forEach(function (level) {
            return (timestamped[level] = function (message) {
                var optionalParams = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    optionalParams[_i - 1] = arguments[_i];
                }
                return Object_1.map(message, function (ea) {
                    return delegate[level].apply(delegate, __spread([new Date().toISOString() + " | " + ea], optionalParams));
                });
            });
        });
        return timestamped;
    }
    Logger.withTimestamps = withTimestamps;
    function filterLevels(l, minLogLevel) {
        var minLogLevelIndex = exports.LogLevels.indexOf(minLogLevel);
        var filtered = {};
        exports.LogLevels.forEach(function (ea, idx) {
            return (filtered[ea] = idx < minLogLevelIndex ? noop : l[ea].bind(l));
        });
        return filtered;
    }
    Logger.filterLevels = filterLevels;
})(Logger = exports.Logger || (exports.Logger = {}));
//# sourceMappingURL=Logger.js.map