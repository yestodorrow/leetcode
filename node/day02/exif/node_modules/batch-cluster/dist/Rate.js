"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Rate = /** @class */ (function () {
    function Rate(ttlMs) {
        if (ttlMs === void 0) { ttlMs = 60000; }
        this.ttlMs = ttlMs;
        this._eventCount = 0;
        this.start = Date.now();
        this.store = [];
    }
    Rate.prototype.onEvent = function () {
        this._eventCount++;
        this.store.push(Date.now());
        this.vacuum();
    };
    Object.defineProperty(Rate.prototype, "eventCount", {
        get: function () {
            return this._eventCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rate.prototype, "period", {
        get: function () {
            return Date.now() - this.start;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rate.prototype, "eventsPerMs", {
        get: function () {
            this.vacuum();
            var elapsed = Math.max(1, Date.now() - this.start);
            if (elapsed > this.ttlMs) {
                return this.store.length / this.ttlMs;
            }
            else {
                return this.store.length / elapsed;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rate.prototype, "eventsPerSecond", {
        get: function () {
            return this.eventsPerMs * 1000;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rate.prototype, "eventsPerMinute", {
        get: function () {
            return this.eventsPerSecond * 60;
        },
        enumerable: true,
        configurable: true
    });
    Rate.prototype.clear = function () {
        this.store.length = 0;
        return this;
    };
    Rate.prototype.vacuum = function () {
        var minTime = Date.now() - this.ttlMs;
        // If nothing's expired, findIndex should return index 0, so this should
        // normally be quite cheap:
        var firstGoodIndex = this.store.findIndex(function (ea) { return ea > minTime; });
        if (firstGoodIndex === -1) {
            this.clear();
        }
        else if (firstGoodIndex > 0) {
            this.store.splice(0, firstGoodIndex);
        }
    };
    return Rate;
}());
exports.Rate = Rate;
//# sourceMappingURL=Rate.js.map