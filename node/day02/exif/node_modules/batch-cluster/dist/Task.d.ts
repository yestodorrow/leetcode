/// <reference types="node" />
import { Parser } from "./Parser";
/**
 * Tasks embody individual jobs given to the underlying child processes. Each
 * instance has a promise that will be resolved or rejected based on the
 * result of the task.
 */
export declare class Task<T> {
    readonly command: string;
    readonly parser: Parser<T>;
    private readonly d;
    private _stdout;
    private _stderr;
    /**
     * @param {string} command is the value written to stdin to perform the given
     * task.
     * @param {Parser<T>} parser is used to parse resulting data from the
     * underlying process to a typed object.
     */
    constructor(command: string, parser: Parser<T>);
    /**
     * @return the resolution or rejection of this task.
     */
    readonly promise: Promise<T>;
    readonly pending: boolean;
    readonly state: string;
    toString(): string;
    onStdout(buf: string | Buffer): void;
    onStderr(buf: string | Buffer): void;
    readonly stdout: string;
    readonly stderr: string;
    /**
     * This is for use by `BatchProcess` only, and will only be called when the
     * process is complete for this task's command
     */
    resolve(stdout: string, stderr: string, passed: boolean): Promise<void>;
    /**
     * This is for use by `BatchProcess` only, and will only be called when the
     * process has errored after N retries
     */
    reject(error: Error, source?: string): void;
}
